// üìÅ prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Companies {
  id        String           @id @default(cuid())
  name      String
  location  String?
  website   String?
  jobs      JobApplications[]
  contacts  HRContacts[]
  createdAt DateTime         @default(now())
}

model HRContacts {
  id        String           @id @default(cuid())
  companyId String
  company   Companies          @relation(fields: [companyId], references: [id])
  name      String
  email     String?
  phone     String?
  role      String? // es. Recruiter, HR Manager, Tech Lead
  notes     String?
  jobs      JobApplications[] @relation("HRContactsOnJobs")
  steps     InterviewSteps[] // üîπ HR legato ai singoli step
  createdAt DateTime         @default(now())
}

model JobApplications {
  id          String            @id @default(cuid())
  companyId   String
  company     Companies           @relation(fields: [companyId], references: [id])
  position    String
  description String?
  status      ApplicationStatus @default(APPLIED)
  steps       InterviewSteps[]
  hrContacts  HRContacts[]       @relation("HRContactsOnJobs") // HR principali
  notes       String?
  createdAt   DateTime          @default(now())
}

model InterviewSteps {
  id     String         @id @default(cuid())
  jobId  String
  job    JobApplications @relation(fields: [jobId], references: [id])
  title  String // es. "Call HR", "Technical Interview"
  date   DateTime
  status StepStatus     @default(SCHEDULED)
  notes  String?

  // üîπ HR specifico che ha condotto questo step
  hrContactId String?
  hrContact   HRContacts? @relation(fields: [hrContactId], references: [id])
}

enum ApplicationStatus {
  APPLIED
  IN_PROGRESS
  OFFER
  REJECTED
}

enum StepStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // puoi aggiungere altri campi custom se vuoi
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  hashedPassword     String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

