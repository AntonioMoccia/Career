// üìÅ prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  avatarUrl     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authProviders AuthProviders[]
  refreshTokens RefreshTokens[]
}
model RefreshTokens {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      Users     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  expiresAt DateTime
  revoked   Boolean   @default(false)
  createdAt DateTime @default(now())
}
model AuthProviders {
  id             String   @id @default(uuid())
  provider       String
  providerUserId String
  hashedPassword String?
  userId         String
  user           Users     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt      DateTime @default(now())

  @@unique([provider, providerUserId])
}

model Companies {
  id        String           @id @default(uuid())
  name      String
  location  String?
  website   String?
  jobs      JobApplications[]
  contacts  HRContacts[]
  createdAt DateTime         @default(now())
}

model HRContacts {
  id        String           @id @default(uuid())
  companyId String
  company   Companies          @relation(fields: [companyId], references: [id])
  name      String
  email     String?
  phone     String?
  role      String? // es. Recruiter, HR Manager, Tech Lead
  notes     String?
  jobs      JobApplications[] @relation("HRContactsOnJobs")
  steps     InterviewSteps[] // üîπ HR legato ai singoli step
  createdAt DateTime         @default(now())
}

model JobApplications {
  id          String            @id @default(uuid())
  companyId   String
  company     Companies           @relation(fields: [companyId], references: [id])
  position    String
  description String?
  status      ApplicationStatus @default(APPLIED)
  steps       InterviewSteps[]
  hrContacts  HRContacts[]       @relation("HRContactsOnJobs") // HR principali
  notes       String?
  createdAt   DateTime          @default(now())
}

model InterviewSteps {
  id     String         @id @default(uuid())
  jobId  String
  job    JobApplications @relation(fields: [jobId], references: [id])
  title  String // es. "Call HR", "Technical Interview"
  date   DateTime
  status StepStatus     @default(SCHEDULED)
  notes  String?

  // üîπ HR specifico che ha condotto questo step
  hrContactId String?
  hrContact   HRContacts? @relation(fields: [hrContactId], references: [id])
}

enum ApplicationStatus {
  APPLIED
  IN_PROGRESS
  OFFER
  REJECTED
}

enum StepStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}
